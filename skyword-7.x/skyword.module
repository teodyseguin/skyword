<?php

define('SKYWORD_VERSION', 1); // Define the version of this api.

function skyword_init() {}

/**
 * Implements hook_permission().
 */
function skyword_permission() {
  return array(
    'administer skyword' => array(
      'title' => t('Administer Skyword'),
      'description' => t('Configure and setup Skyword API')
    ),
    'token retrieve' => array(
      'title' => t('Allow to retrieve authentication token'),
      'description' => t('Return an authentication token'),
    ),
    'version retrieve' => array(
      'title' => t('Allow to retrieve the cms version'),
      'description' => t('Return the version of cms'),
    ),
    'taxonomies retrieve' => array(
      'title' => t('Allow to retrieve a list taxonomies or specific taxonomy'),
      'description' => t('Return a list of taxonomies'),
    ),
    'taxonomy create' => array(
      'title' => t('Allow to create a taxonomy'),
      'description' => t('Create a taxonomy'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function skyword_menu() {
  $items['admin/structure/types/manage/%/skyword'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skyword_content_manage', 4),
    'description' => t('Manage settings for Skyword managed content.'),
    'access arguments' => array('administer skyword'),
    'file' => 'skyword.admin.inc',
    'title' => t('Manage Skyword'),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/structure/taxonomy/%/skyword'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skyword_vocabulary_manage', 3),
    'description' => t('Manage settings for Skyword managed content.'),
    'access arguments' => array('administer skyword'),
    'file' => 'skyword.admin.inc',
    'title' => t('Manage Skyword'),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/config/people/accounts/skyword'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skyword_user_manage', 3),
    'description' => t('Manage settings for Skyword managed users.'),
    'access arguments' => array('administer skyword'),
    'file' => 'skyword.admin.inc',
    'title' => t('Manage Skyword'),
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Access callback check for Skyword API Services.
 */
function _skyword_access($op, $args) {
  global $user;
  $access = FALSE;

  switch($op) {
    case 'token retrieve':
      $access = user_access('token retrieve', $user);
      break;

    case 'version retrieve':
      $access = user_access('version retrieve', $user);
      break;

    case 'taxonomies retrieve':
      $access = user_access('taxonomies retrieve', $user);
      break;

    case 'taxonomy create':
      $access = user_access('taxonomy create', $user);
      break;
  }

  return $access;
}

/**
 * Implements hook_services_resources
 */
function skyword_services_resources() {
  return array(
    'token' => array(
      'index' => array(
        'help' => 'Returns authentication token from this site',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'src/Resources/token',
        ),
        'callback' => '_skyword_token_retrieve',
        'access callback' => '_skyword_access',
        'access arguments' => array('token retrieve'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'client_id',
            'type' => 'string',
            'description' => 'The client ID',
            'source' => array('param' => 'client_id'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'client_secret',
            'type' => 'string',
            'description' => 'The secret client code',
            'source' => array('param' => 'client_secret'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'grant_type',
            'type' => 'string',
            'description' => 'The grant type',
            'source' => array('param' => 'grant_type'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'scope',
            'type' => 'string',
            'description' => 'The scope word',
            'source' => array('param' => 'scope'),
            'optional' => FALSE,
          ),
        ),
      ),
    ),
    'version' => array(
      'index' => array(
        'help' => 'Returns the version of this site.',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'src/Resources/version'
        ),
        'callback' => '_skyword_version_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('version retrieve'),
        'access arguments append' => TRUE
      ),
    ),
    'taxonomies' => array(
      'index' => array( 'help' => 'Returns a list of taxonomies', 'file' => array( 'type' => 'inc',
          'module' => 'skyword',
          'name' => 'src/Resources/taxonomies',
        ),
        'callback' => '_skyword_taxonomies_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('taxonomies retrieve'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => 'The starting page number. Default is 1',
            'source' => array('param' => 'page'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'per_page',
            'type' => 'int',
            'description' => 'The number of entries to retrieve. Default is 250',
            'source' => array('param' => 'per_page'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'fields',
            'type' => 'string',
            'description' => 'A comma separated list of fields to include.',
            'source' => array('param' => 'fields'),
            'optional' => TRUE,
          ),
        ),
      ),
      'retrieve' => array(
        'help' => 'Returns a specific taxonomy',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'src/Resources/taxonomies',
        ),
        'callback' => '_skyword_taxonomies_retrieve',
        'access callback' => '_skyword_access',
        'access arguments' => array('taxonomies retrieve'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The primary identifier of the taxonomy to retrieve',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'terms',
            'type' => 'string',
            'description' => 'Retrieve a list of terms for a given taxonomy.',
            'source' => array('path' => '1'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'page',
            'type' => 'string',
            'description' => 'The starting page number. Default is 1.',
            'source' => array('param' => 'page'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'per_page',
            'type' => 'string',
            'description' => 'The number to retrieve per page. Default is 250.',
            'source' => array('param' => 'per_page'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'fields',
            'type' => 'string',
            'description' => 'A comma separated list of fields to include.',
            'source' => array('param' => 'fields'),
            'optional' => TRUE,
          ),
        ),
      ),
      'create' => array(
        'help' => 'Creates a taxonomy',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'src/Resources/taxonomies',
        ),
        'callback' => '_skyword_taxonomies_create',
        'access callback' => '_skyword_access',
        'access arguments' => array('taxonomy create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The post data from the request',
            'source' => 'data',
            'optional' => FALSE,
          ),
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The identifier of the Taxonomy',
            'source' => array('path' => '0'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'terms',
            'type' => 'string',
            'description' => 'Tells that we are going to create a new Taxonomy term.',
            'source' => array('path' => '1'),
            'optional' => TRUE,
          ),
        ),
      ),
    ),
    'authors' => array(
      'index' => array(
        'help' => 'Returns the index of Authors.',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/authors'
        ),
        'callback' => '_skyword_authors_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('index authors'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => 'Starting page.',
            'source' => array('path' => 0),
            'optional' => TRUE,
          ),
          array(
            'name' => 'per_page',
            'type' => 'int',
            'description' => 'The number to retrieve per page. Default is 250.',
            'source' => array('path' => 0),
            'optional' => TRUE,
          ),
        ),
      ),
      'retrieve' => array(
        'help' => 'Returns the index of Authors.',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/authors'
        ),
        'callback' => '_skyword_authors_get',
        'access callback' => '_skyword_access',
        'access arguments' => array('retrieve author'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The unique id of the author.',
            'source' => array('path' => 0),
            'optional' => FALSE
          )
        ),
      ),
      'create' => array(
        'help' => 'Create an Author',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/authors',
        ),
        'callback' => '_skyword_authors_create',
        'access callback' => '_skyword_access',
        'acces arguments' => array('create author'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'help' => 'Update an Author',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/authors',
        ),
        'callback' => '_skyword_authors_update',
        'access calback' => '_skyword_access',
        'access arguments' => array('update author'),
        'access arguments append' => TRUE,
      ),
    ),
    'posts' => array(
      'index' => array(
        'help' => 'Get the index of Posts',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/posts',
        ),
        'callback' => '_skyword_posts_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('index posts'),
        'access arguments append' => TRUE,
      ),
      'retrieve' => array(
        'help' => 'Get a specific post',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/posts',
        ),
        'callback' => '_skyword_posts_retrieve',
        'access callback' => '_skyword_access',
        'access arguments' => array('retrieve post'),
        'access arguments append' => TRUE,
      ),
      'create' => array(
        'help' => 'Create a post',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resoruces/posts',
        ),
        'callback' => '_skyword_posts_crete',
        'access callback' => '_skyword_access',
        'access arguments' => array('create post'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'help' => 'Update a post',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/posts',
        ),
        'callback' => '_skyword_posts_update',
        'access callback' => '_skyword_access',
        'access arguments' => array('update post'),
        'access arguments append' => TRUE,
      ),
    ),
    'media' => array(
      'index' => array(
        'help' => 'Get the index of medias',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/media',
        ),
        'callback' => '_skyword_medias_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('index medias'),
        'access arguments append' => TRUE,
      ),
      'retrieve' => array(
        'help' => 'Retrieve a specific media',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/media',
        ),
        'callback' => '_skyword_medias_retrieve',
        'access callback' => '_skyword_access',
        'access arguments' => array('retrieve media'),
        'access arguments append' => TRUE,
      ),
      'create' => array(
        'help' => 'Create a media',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/media',
        ),
        'callback' => '_skyword_medias_create',
        'access callback' => '_skyword_access',
        'access arguments' => array('create media'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'help' => 'Update a media',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/media',
        ),
        'callback' => '_skyword_medias_update',
        'access callback' => '_skyword_access',
        'access arguments' => array('update media'),
        'access arguments append' => TRUE,
      ),
    ),
    'content-types' => array(
      'index' => array(
        'help' => 'Return index of content types',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/content_types',
        ),
        'callback' => '_skyword_content_types_index',
        'access callback' => '_skyword_access',
        'access arguments' => array('index content types'),
        'access arguments append' => TRUE,
      ),
      'retrieve' => array(
        'help' => 'Retrieve a specific content type',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/content_types',
        ),
        'callback' => '_skyword_content_types_retrieve',
        'access callback' => '_skyword_access',
        'access arguments' => array('retrieve content type'),
        'access arguments append' => TRUE,
      ),
      'create' => array(
        'help' => 'Create a content type',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/content_types',
        ),
        'callback' => '_skyword_content_types_create',
        'access callback' => '_skyword_access',
        'access arguments' => array('create content type'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'help' => 'Update a content type',
        'file' => array(
          'type' => 'inc',
          'module' => 'skyword',
          'name' => 'resources/content_types',
        ),
        'callback' => '_skyword_content_types_update',
        'access callback' => '_skyword_access',
        'access arguments' => array('update content type'),
        'access arguments append' => TRUE,
      ), // Not listed but maybe this is not needed.
    ),
  );
}

/**
 * Helper function to return all available content types.
 */
function _skyword_available_content_types() {
  $bundles = node_type_get_types();
  $options = array(
    -1 => t('Select a content type')
  );
  foreach($bundles as $id => $bundle) {
    $options[$id] = $bundle->name;
  }

  return $options;
}

/**
 * Helper function to return all content type related fields.
 */
function _skyword_content_type_fields($entity_type = 'node', $bundle = 'author') {
  $field_options = array(
    -1 => t('Please Select a field'),
  );

  $fields = field_info_instances($entity_type, $bundle);

  if ($fields) {
    foreach($fields as $id => $field) {
      $info = field_info_field($id);
      $field_options[$id] = $field['label'];
    }
  }

  return $field_options;
}

/**
 *
 */
function skyword_entity_data($entity_type, $bundle) {
  $query = db_select('skyword_entities', 's')
    ->fields('s')
    ->condition('s.entity_type', $entity_type)
    ->condition('s.bundle', $bundle);

  $result = $query->execute()->fetchAssoc();

  if (isset($result['data'])) {
    $result['data'] = unserialize($result['data']);
  }

  return $result;
}

