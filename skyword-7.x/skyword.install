<?php

/**
 * Implements hook_install.
 * - We want to create the /skyword/publish/v1 endpoint for all other resources.
 * - Optionally? Create content types or discover existing ones and prompt admin.
 */
function skyword_install() {
  // We need to create the Author content type....
  $author_type = node_type_load('author');

  if (!$author_type) {
    // Programmatically create the author and
    // Set the initial variable values for the fields
    skyword_create_author_type();
  }

  drupal_install_schema('skyword');
}

function skyword_uninstall() {
  if (db_table_exists('skyword_entities')) {
    drupal_uninstall_schema('skyword');
  }
}

function skyword_schema() {
  return array(
    'skyword_entities' => array(
      'description' => 'Store which entities are enabled for skyword use',
      'fields' => array(
        'id' => array(
          'description' => 'The primary identifier of the entity',
          'type' => 'serial',
          'unassigned' => TRUE,
          'not null' => TRUE
        ),
        'entity_type' => array(
          'description' => 'The type of entity',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'bundle' => array(
          'description' => 'The bundle type of the entity e.g. node type, vocabulary, terms.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'status' => array(
          'description' => 'Determine if the entity is enabled or not for skyword use',
          'type' => 'int',
          'default' => 0,
        ),
      ),
      'primary key' => array('id'),
    ),
  );
}

/**
 * Creates the Author content type programmatically
 */
function skyword_create_author_type() {
  $author_type = array(
    'type' => 'author',
    'name' => t('Author'),
    'base' => 'node_content',
    'description' => t('Content type Author'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
  );

  $author_type = node_type_set_defaults($author_type);

  $author_fields = array(
    'first_name' => array(
      'label' => 'First Name',
      'description' => 'The first name of the author',
      'type' => 'text',
      'widget_type' => 'text_textfield'
    ),
    'last_name' => array(
      'label' => 'Last Name',
      'description' => 'The last name of the author',
      'type' => 'text',
      'widget_type' => 'text_textfield',
    ),
    'email' => array(
      'label' => 'E-mail',
      'description' => 'The email of the author',
      'type' => 'email',
      'widget_type' => 'email_textfield',
    ),
    'byline' => array(
      'label' => 'Byline',
      'description' => 'The complete name of the author',
      'type' => 'text',
      'widget_type' => 'text_textfield',
    ),
    'icon' => array(
      'label' => 'Icon',
      'description' => 'The image icon of the author',
      'type' => 'image',
      'widget_type' => 'image_image',
    ),
  );

  foreach ($author_fields as $field => $info) {
    ${'field_' . $field} = array(
      'field_name' => $field,
      'type' => $info['type'],
      'entity_types' => array('node'),
    );

    ${'field_' . $field} = field_create_field(${'field_' . $field});

    $instance = array(
        'field_name' => $field,
        'entity_type' => 'node',
        'bundle' => 'author',
        'label' => t($info['label']),
        'widget' => array(
          'type' => $info['widget_type'],
        ),
    );

    $instance = field_create_instance($instance);

    node_type_save($author_type);
    node_add_body_field($author_type);
  }
}

